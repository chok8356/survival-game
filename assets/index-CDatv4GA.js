var u=Object.defineProperty;var p=(h,e,t)=>e in h?u(h,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):h[e]=t;var s=(h,e,t)=>p(h,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const n of r)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function t(r){const n={};return r.integrity&&(n.integrity=r.integrity),r.referrerPolicy&&(n.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?n.credentials="include":r.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(r){if(r.ep)return;r.ep=!0;const n=t(r);fetch(r.href,n)}})();class y{constructor(){s(this,"keys",{});s(this,"mouseDown",!1);s(this,"mouseX",0);s(this,"mouseY",0);window.addEventListener("keydown",e=>this.keys[e.code]=!0),window.addEventListener("keyup",e=>this.keys[e.code]=!1),window.addEventListener("mousemove",e=>{this.mouseX=e.clientX,this.mouseY=e.clientY}),window.addEventListener("mousedown",()=>this.mouseDown=!0),window.addEventListener("mouseup",()=>this.mouseDown=!1)}getMousePosition(){return{x:this.mouseX,y:this.mouseY}}isKeyPressed(e){return this.keys[e]}isMousePressed(){return this.mouseDown}}class m{constructor(){s(this,"score",0)}addPoints(e){this.score+=e}getScore(){return this.score}reset(){this.score=0}}class f{constructor(e,t,i=1){s(this,"radius",10);s(this,"speed");s(this,"x");s(this,"y");this.x=e,this.y=t,this.speed=i}avoidCollisions(e){e.forEach(t=>{if(t===this)return;const i=t.x-this.x,r=t.y-this.y;if(Math.sqrt(i*i+r*r)<30){const a=Math.atan2(r,i),o=5;this.x-=Math.cos(a)*o,this.y-=Math.sin(a)*o}})}move(e,t,i){const r=e-this.x,n=t-this.y,a=Math.sqrt(r*r+n*n);if(a>0){const o=r/a*this.speed,d=n/a*this.speed;this.x+=o,this.y+=d}this.avoidCollisions(i)}}class x{constructor(e,t,i){s(this,"radius",2);s(this,"speed",12);s(this,"velocityX");s(this,"velocityY");s(this,"x");s(this,"y");this.x=e,this.y=t,this.velocityX=Math.cos(i)*this.speed,this.velocityY=Math.sin(i)*this.speed}checkCollision(e){const t=this.x-e.x,i=this.y-e.y;return Math.sqrt(t*t+i*i)<this.radius+e.radius}update(){this.x+=this.velocityX,this.y+=this.velocityY}}class w{constructor(e,t,i,r,n=2){s(this,"bullets");s(this,"lastShotTime",0);s(this,"radius",10);s(this,"screenHeight");s(this,"screenWidth");s(this,"shootCooldown",150);s(this,"speed");s(this,"x");s(this,"y");this.x=e,this.y=t,this.screenWidth=i,this.screenHeight=r,this.speed=n,this.bullets=[]}moveDown(){this.y+this.speed<=this.screenHeight&&(this.y+=this.speed)}moveLeft(){this.x-this.speed>=0&&(this.x-=this.speed)}moveRight(){this.x+this.speed<=this.screenWidth&&(this.x+=this.speed)}moveUp(){this.y-this.speed>=0&&(this.y-=this.speed)}shoot(e){const t=Date.now();if(t-this.lastShotTime>=this.shootCooldown){const i=this.x,r=this.y,n=new x(i,r,e);this.bullets.push(n),this.lastShotTime=t}}updateBullets(){this.bullets.forEach(e=>e.update()),this.bullets=this.bullets.filter(e=>e.x>=0&&e.x<=this.screenWidth&&e.y>=0&&e.y<=this.screenHeight)}}class g{constructor(e,t,i,r,n){s(this,"elapsedTime",0);s(this,"enemies",[]);s(this,"gameOver",!1);s(this,"inputHandler");s(this,"lastSpawnTime",0);s(this,"player");s(this,"renderer");s(this,"scoreManager");s(this,"screenHeight");s(this,"screenWidth");s(this,"spawnInterval",500);this.screenWidth=r,this.screenHeight=n,this.player=new w(this.screenWidth/2,this.screenHeight/2,this.screenWidth,this.screenHeight),this.inputHandler=t,this.renderer=e,this.scoreManager=i}start(){this.scoreManager.reset(),this.gameOver=!1,this.elapsedTime=0;let e=0;const t=i=>{const r=i-e;if(e=i,this.gameOver){this.renderer.clear(),this.renderer.drawGameOver(this.scoreManager.getScore());return}this.elapsedTime+=r/1e3,this.update(r),this.render(),requestAnimationFrame(t)};requestAnimationFrame(t)}checkPlayerCollision(e){const t=e.x-this.player.x,i=e.y-this.player.y;return Math.sqrt(t*t+i*i)<e.radius+this.player.radius}createRandomEnemy(){const e=Math.floor(Math.random()*4);let t=Math.random()*this.screenWidth,i=Math.random()*this.screenHeight;return e===0&&(i=-50),e===1&&(i=this.screenHeight+50),e===2&&(t=-50),e===3&&(t=this.screenWidth+50),new f(t,i)}handleBulletCollisions(){this.player.bullets.forEach((e,t)=>{this.enemies.forEach((i,r)=>{e.checkCollision(i)&&(this.scoreManager.addPoints(1),this.enemies.splice(r,1),this.player.bullets.splice(t,1))})})}handlePlayerInput(){if(this.inputHandler.isKeyPressed("KeyA")&&this.player.moveLeft(),this.inputHandler.isKeyPressed("KeyD")&&this.player.moveRight(),this.inputHandler.isKeyPressed("KeyW")&&this.player.moveUp(),this.inputHandler.isKeyPressed("KeyS")&&this.player.moveDown(),this.inputHandler.isMousePressed()){const{x:e,y:t}=this.inputHandler.getMousePosition(),i=Math.atan2(t-this.player.y,e-this.player.x);this.player.shoot(i)}}render(){this.renderer.clear(),this.renderer.drawScore(this.scoreManager.getScore()),this.renderer.drawTimer(this.elapsedTime),this.renderer.drawPlayer(this.player.x,this.player.y),this.enemies.forEach(e=>{this.renderer.drawEnemy(e.x,e.y)}),this.player.bullets.forEach(e=>{this.renderer.drawBullet(e.x,e.y)})}spawnEnemies(e){if(this.lastSpawnTime+=e,this.lastSpawnTime>=this.spawnInterval){this.lastSpawnTime=0;const t=this.createRandomEnemy();this.enemies.push(t)}}update(e){this.handlePlayerInput(),this.spawnEnemies(e),this.updateEnemies(),this.player.updateBullets(),this.handleBulletCollisions()}updateEnemies(){this.enemies.forEach(e=>{e.move(this.player.x,this.player.y,this.enemies),this.checkPlayerCollision(e)&&(this.gameOver=!0)})}}class v{constructor(e){s(this,"ctx");this.canvas=e,this.ctx=e.getContext("2d")}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawBullet(e,t){this.ctx.beginPath(),this.ctx.arc(e,t,2,0,Math.PI*2),this.ctx.fillStyle="white",this.ctx.fill()}drawEnemy(e,t){this.ctx.beginPath(),this.ctx.arc(e,t,10,0,Math.PI*2),this.ctx.fillStyle="red",this.ctx.fill()}drawGameOver(e){this.ctx.font="30px Arial",this.ctx.fillStyle="red",this.ctx.textAlign="center",this.ctx.fillText(`Game Over: ${e}`,this.canvas.width/2,this.canvas.height/2)}drawPlayer(e,t){this.ctx.beginPath(),this.ctx.arc(e,t,10,0,Math.PI*2),this.ctx.fillStyle="white",this.ctx.fill()}drawScore(e){this.ctx.font="20px Arial",this.ctx.fillStyle="white",this.ctx.textAlign="left",this.ctx.fillText(`Score: ${e}`,10,30)}drawTimer(e){const t=e.toFixed(1);this.ctx.font="20px Arial",this.ctx.fillStyle="white",this.ctx.textAlign="right",this.ctx.fillText(`Time: ${t}s`,this.canvas.width-10,30)}}const c=document.createElement("canvas");document.body.appendChild(c);function l(){c.width=window.innerWidth,c.height=window.innerHeight}const M=new v(c),P=new y,E=new m,H=new g(M,P,E,window.innerWidth,window.innerHeight);l();window.addEventListener("resize",l);H.start();
